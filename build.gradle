buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://repo.grails.org/grails/core' }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11'
    }
}

plugins {
    id 'com.jfrog.bintray' version '1.2'
}

version '2.0.0'
group 'org.grails.plugins'

apply plugin:'eclipse'
apply plugin:'idea'
apply plugin:'org.grails.grails-plugin'
apply plugin:'org.grails.grails-plugin-publish'
apply plugin: 'org.asciidoctor.convert'

bintray {
    pkg {
        userOrg = 'virtualdogbert'
        repo = 'plugins'
        name = "$project.group:$project.name"
        issueTrackerUrl = 'https://github.com/virtualdogbert/Enforcer/issues'
        vcsUrl = 'https://github.com/virtualdogbert/Enforcer'
        websiteUrl = 'https://virtualdogbert.github.io/Enforcer'
        licenses = ['Apache-2.0']
        version {
            attributes = ['grails-plugin': "$project.group:$project.name"]
            name = project.version
        }
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenLocal()
    maven { url 'https://repo.grails.org/grails/core' }
}

dependencies {
    provided 'org.springframework.boot:spring-boot-starter-logging'
    provided 'org.springframework.boot:spring-boot-starter-actuator'
    provided 'org.springframework.boot:spring-boot-autoconfigure'
    provided 'org.springframework.boot:spring-boot-starter-tomcat'

    provided 'org.grails:grails-web-boot'
    provided 'org.grails:grails-dependencies'
    provided 'javax.servlet:javax.servlet-api:3.1.0'

    testCompile 'org.grails:grails-plugin-testing'

    console 'org.grails:grails-console'
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}
// enable if you wish to package this plugin as a standalone application
bootRepackage.enabled = false

grailsPublish {
    user = 'user'
    key = 'key'
    githubSlug = 'enforcer'
    license {
        name = 'Apache-2.0'
    }
    title = 'Enforcer'
    desc = 'A plugin for enforcing business rules/permissions, that works with Spring Security Core, is easier to implement, and extend. It can also be used as an alternative to Spring Security ACL'
    developers = [tpelletier:'Tucker Pelletier']
}


def asciidoctorAttributes = [
        copyright           : 'Apache License, Version 2.0',
        docinfo1            : 'true',
        doctype             : 'book',
        encoding            : 'utf-8',
        'front-cover-image' : 'image:cover.png[Front Cover,800,600]',
        icons               : 'font',
        id                  : project.name + ':' + project.version,
        idprefix            : '',
        idseparator         : '-',
        lang                : 'en',
        linkattrs           : true,
        numbered            : '',
        producer            : 'Asciidoctor',
        revnumber           : project.version,
        setanchors          : true,
        'source-highlighter': 'prettify',
        toc                 : 'left',
        toc2                : '',
        toclevels           : '2'
]

import org.asciidoctor.gradle.AsciidoctorTask

tasks.withType(AsciidoctorTask) {
    attributes asciidoctorAttributes
    outputDir new File(buildDir, 'docs')
    separateOutputDirs = false
    sourceDir = file('src/docs')
    sources {
        include 'index.adoc'
    }
}

task asciidoc(type: AsciidoctorTask, description: 'Generates single-page HTML, and PDF') {
    backends 'html5', 'pdf'
}

task docs(dependsOn: [asciidoc]) {

    File dir = new File(buildDir, 'docs')
    ['pdf'].each { String ext ->
        File f = new File(dir, 'index.' + ext)
        if (f.exists()) {
            f.renameTo new File(dir, project.name + '-' + project.version + '.' + ext)
        }
    }

    copy {
        from 'src/docs'
        into new File(buildDir, 'docs').path
        include '**/*.png'
    }
}
